# Build library and examples, and generate releases.
name: FusionEngine Client Build

on:
  push:
    # Build on a push to any branch.
    branches:
      - '*'
    # Build on a push of any tag named v* (v1.0, etc.) and generate a release.
    tags:
      - 'v*'

jobs:
  # Build the library and example applications.
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tool: [bazel, cmake]
        compiler: [g++, clang++]
    steps:
    - uses: actions/checkout@v2

    # Bazel build
    - name: Setup Bazel 3.3.0
      if: matrix.tool == 'bazel'
      uses: abhinavsingh/setup-bazel@v3
      with:
        version: 3.3.0

    - name: Build Library
      if: matrix.tool == 'bazel'
      env:
        CC: /usr/bin/${{ matrix.compiler }}
      run: |
        bazel build -c opt //:*

    - name: Build Examples
      if: matrix.tool == 'bazel'
      env:
        CC: /usr/bin/${{ matrix.compiler }}
      run: |
        cd examples &&
        bazel build -c opt //:*

    - name: Install Files
      if: matrix.tool == 'bazel'
      run: |
        mkdir install &&
        cp examples/bazel-bin/message_decode/message_decode ./install/ &&
        cp examples/bazel-bin/generate_data/generate_data ./install/ &&
        cp examples/message_decode/example_data.p1bin ./install/

    # CMake build
    - name: Setup CMake 3.16.x
      if: matrix.tool == 'cmake'
      uses: jwlawson/actions-setup-cmake@v1.3
      with:
        cmake-version: '3.16.x'

    - name: Build Library And Examples
      if: matrix.tool == 'cmake'
      env:
        CXX: /usr/bin/${{ matrix.compiler }}
      run: |
        mkdir build &&
        cd build &&
        cmake -DCMAKE_INSTALL_PREFIX=install ..
        make
        make install

    - name: Install Files
      if: matrix.tool == 'cmake'
      run: |
        mkdir install &&
        cp build/examples/message_decode/message_decode ./install/ &&
        cp build/examples/generate_data/generate_data ./install/ &&
        cp examples/message_decode/example_data.p1bin ./install/

    # Run unit tests.
    - name: Test Message Decoding
      run: |
        cd install &&
        ./message_decode example_data.p1bin

    - name: Test Message Encoding
      run: |
        cd install &&
        ./generate_data new_data.p1bin &&
        ./message_decode new_data.p1bin

  # Create a release only on a tag (not on a branch push).
  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build]
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Create release
      id: create_release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
